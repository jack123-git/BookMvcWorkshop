@page "/bookmanage"
@using System.Text.Json
@rendermode RenderMode.InteractiveServer
@inject IBookRepository bookRepository
@inject DialogService dialogService
@inject NotificationService NotificationService
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime

<h4 class="rz-text-h5" >
    圖書維護
</h4>

<RadzenCard class="rz-my-1 rz-mx-auto" Style="max-width: 600px">
    <RadzenRow Gap="0.75rem" class="mb-1">
        <RadzenColumn Size="3" class="rz-text-align-right rz-color-on-info-lighter mt-1">
            <RadzenText TextStyle="TextStyle.H6">書名</RadzenText>            
        </RadzenColumn>
        <RadzenColumn class="rz-color-on-info-lighter mb-2">
            <RadzenTextBox Placeholder="輸入查詢書名..." @bind-Value=@queryBookName Style="width: 100%" aria-label="TextBox with placeholder" />
        </RadzenColumn>
        <RadzenColumn Size="1">            
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow Gap="0.75rem" class="mb-1">
        <RadzenColumn Size="3" class="rz-text-align-right rz-color-on-info-lighter mt-1">
            <RadzenText TextStyle="TextStyle.H6">圖書類別</RadzenText>
        </RadzenColumn>
        <RadzenColumn class="rz-color-on-info-lighter mb-2">
            <RadzenDropDown @bind-Value=@queryBookClass ValueProperty="BOOK_CLASS_ID" TextProperty="BOOK_CLASS_NAME" Data=@bookClassList Style="width: 100%; max-width: 400px;" Name="DropDownBindValue" />
        </RadzenColumn>
        <RadzenColumn Size="1"></RadzenColumn>
    </RadzenRow>
    <RadzenRow Gap="0.75rem" class="mb-1">
        <RadzenColumn Size="3" class="rz-text-align-right rz-color-on-info-lighter mt-1">
            <RadzenText TextStyle="TextStyle.H6">借閱人</RadzenText>
        </RadzenColumn>
        <RadzenColumn class="rz-color-on-info-lighter mb-2">
            <RadzenDropDown @bind-Value=@queryMemberId ValueProperty="USER_ID" TextProperty="USER_Name" Data=@memberList Style="width: 100%; max-width: 400px;" Name="DropDownBindValue" />
        </RadzenColumn>
        <RadzenColumn Size="1"></RadzenColumn>
    </RadzenRow>
    <RadzenRow Gap="0.75rem" class="mb-1">
        <RadzenColumn Size="3" class="rz-text-align-right rz-color-on-info-lighter mt-1">
            <RadzenText TextStyle="TextStyle.H6">借閱狀態</RadzenText>
        </RadzenColumn>
        <RadzenColumn class="rz-color-on-info-lighter mb-2">
            <RadzenDropDown @bind-Value=@queryBookStatusId ValueProperty="BOOK_STATUS_ID" TextProperty="BOOK_STATUS_NAME" Data=@bookStatusList Style="width: 100%; max-width: 400px;" Name="DropDownBindValue" />
        </RadzenColumn>
        <RadzenColumn Size="1"></RadzenColumn>
    </RadzenRow>
    <RadzenRow Gap="0.75rem" >
        <RadzenColumn Size="3" class="rz-text-align-right rz-color-on-info-lighter mt-1">

        </RadzenColumn>
        <RadzenColumn class="rz-color-on-info-lighter">
            <RadzenButton Variant="Variant.Flat" Click=@(() => QueryBooksAsync()) Icon="search" Text="查詢" ButtonStyle="ButtonStyle.Info" class="rz-border-radius-10 text-white rz-background-color-info p-2" />
            @* <RadzenButton Variant="Variant.Outlined" Click=@(args => ClearItem()) Text="清除" ButtonStyle="ButtonStyle.Secondary" /> *@
            <RadzenButton Variant="Variant.Flat" Click=@ClearItem Icon="clear" Text="清除" ButtonStyle="ButtonStyle.Secondary" class="rz-border-radius-10 text-white rz-background-color-warning p-2" />
            <RadzenButton Variant="Variant.Flat" Click=@(args => NavigateTo("/createbookpage")) Icon="add" Text="新增" ButtonStyle="ButtonStyle.Success" class="rz-border-radius-10 text-white rz-background-color-Success p-2" />
        </RadzenColumn>
        <RadzenColumn Size="1"></RadzenColumn>
    </RadzenRow>
</RadzenCard>

@if (bookDatas != null)
{
    <RadzenDataGrid @ref=grid class="mt-3" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="4" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="false"
    Data="@bookDatas" TItem="BookDataViewModel" RowSelect=@(args => RowSelected(args)) ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" AllowVirtualization="true">@* SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedbooks *@
        <EmptyTemplate>
            <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">查無資料</p>
        </EmptyTemplate>
        <Columns>
            <RadzenDataGridColumn Property="@nameof(BookDataViewModel.BOOK_ID)" Filterable="false" Title="ID" Frozen="true" Width="70px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn Property="@nameof(BookDataViewModel.BOOK_CLASS_NAME)" Filterable="false" Title="圖書類別" Frozen="true" Width="100px" TextAlign="TextAlign.Left" />
            <RadzenDataGridColumn Property="@nameof(BookDataViewModel.BOOK_NAME)" Filterable="true" Title="書名" Frozen="true" Width="300px" TextAlign="TextAlign.Left" />
            <RadzenDataGridColumn Property="@nameof(BookDataViewModel.BOOK_BOUGHT_DATE)" Filterable="false" Title="購書日期" Frozen="true" Width="120px" FormatString="{0:d}" TextAlign="TextAlign.Left" />
            <RadzenDataGridColumn Property="@nameof(BookDataViewModel.BOOK_STATUS_NAME)" Filterable="true" Title="借閱狀態" Frozen="true" Width="120px" TextAlign="TextAlign.Left" />
            <RadzenDataGridColumn Property="@nameof(BookDataViewModel.BORROWER_NAME)" Filterable="true" Title="借閱人" Frozen="true" Width="140px" TextAlign="TextAlign.Left" />
            <RadzenDataGridColumn Context="bookData" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="200px">
                <Template Context="bookData">
                    <RadzenButton Variant="Variant.Flat" Icon="search" Click=@(args => OpenBookLendRecordDialog(bookData.BOOK_ID)) Text="查看明細" class="rz-border-radius-10 text-white rz-background-color-info p-2" ButtonStyle="ButtonStyle.Warning" />
                    <RadzenButton Variant="Variant.Flat" Icon="edit" Click=@(args => EditBookData(bookData.BOOK_ID)) ButtonStyle="ButtonStyle.Success" class="rz-border-radius-10 text-white rz-background-color-Success p-2" />
                    <RadzenButton class="rz-border-radius-10 text-white rz-background-color-warning p-2" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Click=@(args => ConfirmDeleteAsync(bookData)) ButtonStyle="ButtonStyle.Danger" aria-label="Delete" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>    
}


@* 測試用 *@
@* <RadzenCard class="rz-my-1 rz-mx-auto" Style="max-width: 200px">
    <div>
        書籍名稱：@queryBookName
    </div>
    <div>
        書籍類別代碼：@queryBookClass
    </div>
    <div>
        借閱人代碼：@queryMemberId
    </div>
    <div>
        借閱狀態代碼：@queryBookStatusId
    </div>
</RadzenCard> *@



@code {
    string queryBookName = "";
    string queryBookClass = "";
    string queryMemberId = "";
    string queryBookStatusId = "";

    List<BookDataViewModel> bookDatas { get; set; } //= new List<BookDataViewModel>();
    List<BookClass> bookClassList { get; set; } = new List<BookClass>();
    List<Member> memberList { get; set; } = new List<Member>();
    List<BookStatus> bookStatusList { get; set; } = new List<BookStatus>();
    IList<BookDataViewModel> selectedbooks;

    RadzenDataGrid<BookDataViewModel> grid;



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        bookClassList = ((IEnumerable<BookClass>)await bookRepository.GetAllBookClassAsync()).ToList();
        memberList = ((IEnumerable<Member>)await bookRepository.GetAllMemberAsync()).ToList();
        bookStatusList = ((IEnumerable<BookStatus>)await bookRepository.GetAllBookStatusAsync()).ToList();

    }

    private void ClearItem()
    {
        queryBookName = "";
        queryBookClass = "";
        queryMemberId = "";
        queryBookStatusId = "";
    }

    private async Task QueryBooksAsync()
    {
        bookDatas = await bookRepository.GetQueryBookDataAsync(queryBookName, queryBookClass, queryMemberId, queryBookStatusId);
        StateHasChanged();

        if (grid != null)
            await grid.Reload();
    }

    // 確認對話框及刪除資料
    private async Task ConfirmDeleteAsync(BookDataViewModel book)
    {
        var response = await dialogService.Confirm(
            $"你確定要刪除 編號：{book.BOOK_ID} 書名：{book.BOOK_NAME} 資料?",
            "確認",
            new ConfirmOptions()
                {
                    CloseDialogOnEsc = false,
                    CloseDialogOnOverlayClick = false,
                    ShowClose = false,
                    CancelButtonText = "否",
                    OkButtonText = "是",
                });

        if (response == true)
        {
            var ok = await bookRepository.DeleteBookDataAsync(book.BOOK_ID);
            if (ok.ResultCode > 0)
            {
                //確認後執行程序
                NotificationMessage message = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "通知", Detail = $"編號：{book.BOOK_ID} 書名：{book.BOOK_NAME} 資料刪除成功!", Duration = 4000 };
                NotificationService.Notify(message);
                QueryBooksAsync();
            }
        }
    }

    private void NavigateTo(string pageName)
    {
        navigationManager.NavigateTo(pageName);
    }
}

@code {
    public async Task EditBookData(int bookId)
    {
        navigationManager.NavigateTo($"/editbookpage/{bookId}");
    }
}

@code {
    private void RowSelected(BookDataViewModel book)
    {
        // dialogService.Confirm("Are you sure?", "MyTitle", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        OpenBookData(book.BOOK_ID);
    }
}

@code {
    // 會發生不明錯誤
    public async Task OpenBookData(int BOOK_ID)
    {
        string title = $"圖書資料：編號 {BOOK_ID}";
        // await LoadStateAsync();

        await dialogService.OpenAsync<BookDetailPage>($"{title}",
               new Dictionary<string, object>() { ["BookID"] = BOOK_ID, }, //null, ["ShowClose"] = false, // new Dictionary<string, object>() { ["BookID"] = bookId } },
               new DialogOptions()
                   {
                       Resizable = true,
                       Draggable = true,
                       Resize = OnResize,
                       Drag = OnDrag,
                       Width = Settings != null ? Settings.Width : "660px",
                       Height = Settings != null ? Settings.Height : "640px",
                       Left = Settings != null ? Settings.Left : null,
                       Top = Settings != null ? Settings.Top : null
                   });

        await SaveStateAsync();
    }

    void OnDrag(System.Drawing.Point point)
    {
        JSRuntime.InvokeVoidAsync("eval", $"console.log('Dialog drag. Left:{point.X}, Top:{point.Y}')");

        if (Settings == null)
        {
            Settings = new DialogSettings();
        }

        Settings.Left = $"{point.X}px";
        Settings.Top = $"{point.Y}px";

        InvokeAsync(SaveStateAsync);
    }

    void OnResize(System.Drawing.Size size)
    {
        JSRuntime.InvokeVoidAsync("eval", $"console.log('Dialog resize. Width:{size.Width}, Height:{size.Height}')");

        if (Settings == null)
        {
            Settings = new DialogSettings();
        }

        Settings.Width = $"{size.Width}px";
        Settings.Height = $"{size.Height}px";

        InvokeAsync(SaveStateAsync);
    }

    DialogSettings _settings;
    public DialogSettings Settings
    {
        get
        {
            return _settings;
        }
        set
        {
            if (_settings != value)
            {
                _settings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;

        var result = await JSRuntime.InvokeAsync<string>("window.localStorage.getItem", "DialogSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _settings = JsonSerializer.Deserialize<DialogSettings>(result);
        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;

        await JSRuntime.InvokeVoidAsync("window.localStorage.setItem", "DialogSettings", JsonSerializer.Serialize<DialogSettings>(Settings));
    }

    public class DialogSettings
    {
        public string Left { get; set; }
        public string Top { get; set; }
        public string Width { get; set; }
        public string Height { get; set; }
    }   
}

@code {
    // 借閱紀錄
    DialogPosition bookLendPosition = DialogPosition.Right;
    bool closeDialogOnOverlayClick = true;
    bool showMask = true;

    async Task OpenBookLendRecordDialog(int bookId)
    {
        await dialogService.OpenSideAsync<BookLendRecordPage>("借閱紀錄", new Dictionary<string, object>() { ["BookID"] = bookId, }, options: new SideDialogOptions { CloseDialogOnOverlayClick = closeDialogOnOverlayClick, Position = bookLendPosition, ShowMask = showMask, Width = "500px" });
    }
}